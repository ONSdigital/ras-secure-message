apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    rollingUpdate:
      maxSurge:  {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      env: {{ .Values.env }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        env: {{ .Values.env }}
    spec:
      volumes:
        - name: google-cloud-key
          secret:
            secretName: google-application-credentials
        {{- if .Values.database.sqlProxyEnabled }}
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-proxy-credentials
            defaultMode: 0444
            items:
            - key: "credentials.json"
              path: "credentials.json"
        {{- end }}
      containers:
        {{- if .Values.database.sqlProxyEnabled }}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.32.0
          command: ["/cloud_sql_proxy",
                    "-instances=$(SQL_INSTANCE_NAME)=tcp:$(DB_PORT)",
                    "-ip_address_types=PRIVATE",
                    "-credential_file=/secrets/cloudsql/credentials.json",
                    "-term_timeout=30s",
                    "-verbose=false"]
          securityContext:
            runAsUser: 2  # non-root user
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
          env:
          - name: SQL_INSTANCE_NAME
            valueFrom:
              configMapKeyRef:
                name: cloudsql-proxy-config
                key: instance-connection-name
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-port
          resources:
            {{ toYaml .Values.resources.proxy | nindent 12 }}
        {{- end }}
        - name: {{ .Chart.Name }}
           {{- if eq .Values.image.tag "latest"}}
          image: "{{ .Values.image.name }}/{{ .Chart.Name }}:{{ .Chart.AppVersion }}"
          {{- else}}
          image: "{{ .Values.image.devRepo }}/{{ .Chart.Name }}:{{ .Values.image.tag }}"
          {{- end}}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: google-cloud-key
            mountPath: /var/secrets/google
          ports:
            - name: http-server
              containerPort: {{ .Values.container.port }}
          readinessProbe:
            httpGet:
              path: /info
              port: {{ .Values.container.port }}
            initialDelaySeconds: 5
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /info
              port: {{ .Values.container.port }}
            initialDelaySeconds: 5
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          env:
          - name: DB_HOST
            {{- if .Values.database.managedPostgres }}
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-host
            {{- else }}
            value: $(POSTGRES_SERVICE_HOST)
            {{- end }}
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-port
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: db-config
                key: {{ .Values.database.secrets.nameKey }}
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: {{ .Values.database.secrets.usernameKey }}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: {{ .Values.database.secrets.passwordKey }}
          - name: SECURITY_USER_NAME
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-user
          - name: SECURITY_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-password
          - name: PORT
            value: "{{ .Values.container.port }}"
          - name: DATABASE_URL
            {{- if .Values.database.sqlProxyEnabled }}
            value: "postgresql://$(DB_USERNAME):$(DB_PASSWORD)@127.0.0.1:$(DB_PORT)/$(DB_NAME)"
            {{- else }}
            value: "postgresql://$(DB_USERNAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)"
            {{- end }}
          - name: SM_JWT_ENCRYPT
            value: "0"
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: jwt-secret
                key: jwt-secret
          - name: NOTIFICATION_TEMPLATE_ID
            value: "{{ .Values.email.templates.notification }}"
          - name: NOTIFY_VIA_GOV_NOTIFY
            value: "{{ .Values.email.enabled }}"
          - name: GOOGLE_CLOUD_PROJECT
            value: "{{ .Values.gcp.project }}"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/secrets/google/credentials.json
          - name: PUBSUB_TOPIC
            value: "{{ .Values.gcp.topic }}"
          - name: FRONTSTAGE_URL
            value: "{{ .Values.email.frontstageProtocol}}://{{ .Values.email.frontstageHost }}"
          - name: PARTY_URL
            {{- if .Values.dns.enabled }}
            value: "http://party.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.dns.wellKnownPort }}"
            {{- else }}
            value: "http://$(PARTY_SERVICE_HOST):$(PARTY_SERVICE_PORT)"
            {{- end }}
          - name: USE_UAA
            value: "1"
          - name: UAA_URL
            {{- if .Values.dns.enabled }}
            value: "http://uaa.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.dns.wellKnownPort }}"
            {{- else }}
            value: "http://$(UAA_SERVICE_HOST):$(UAA_SERVICE_PORT)"
            {{- end }}
          - name: CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: secure-message
                key: client-id
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: secure-message
                key: client-secret
          - name: LOGGING_LEVEL
            value: "{{ .Values.app.config.loggingLevel }}"
          resources:
            {{ toYaml .Values.resources.application | nindent 12 }}
